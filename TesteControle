/*
   Usina Robots
   
   Software de Controle do Robô US-2
   
    
   Autor: Eng. Wagner Rambo  Data: Fevereiro de 2017
   
   www.wrkits.com.br | facebook.com/wrkits | youtube.com/user/canalwrkits
   
*/


// =============================================================================================================
// --- Mapeamento de Hardware ---
#define   ch1      2     //Canal 1 do rádio instanciado à entrada digital 2
#define   ch2      3     //Canal 2 do rádio instanciado à entrada digital 3
#define   ch3      4     //Canal 3 do rádio instanciado à entrada digital 4
#define   ch4      5     //Canal 4 do rádio instanciado à entrada digital 5
#define   ch5      6     //Canal 5 do rádio instanciado à entrada digital 6
#define   ch6      7     //Canal 6 do rádio instanciado à entrada digital 7
#define   ch7      8     //Canal 7 do rádio instanciado à entrada digital 8
#define   ch8      9     //Canal 8 do rádio instanciado à entrada digital 9
#define   pwm1    10     //Controle pwm1
#define   pwm2    11     //Controle pwm2
#define   inv1    14     //Controle de sentido do motor1 (A0)
#define   inv2    15     //Controle de sentido do motor2 (A1)


// =============================================================================================================
// --- Protótipo das funções auxiliares ---
void atuadores();          //Função de controle dos atuadores do Robô US-2
void read_channels();      //Função para leitura das entradas dos canais
void test_channels();      //Testa os 8 canais do Turnigy9x



// =============================================================================================================
// --- Declaração de variáveis globais ---
short       change_ch = 0x00,   //variável para determinar qual canal será lido
            counterT2 = 0x00;

//variáveis para os canais do rádio
int         canal_01 , 
            canal_02 , 
            canal_03 , 
            canal_04 , 
            canal_05 , 
            canal_06 , 
            canal_07 , 
            canal_08 ,
            pwm_value; 


// =============================================================================================================
// --- Interrupção ---
ISR(TIMER2_OVF_vect)
{
    TCNT2 = 0x64;          // Reinicializa o registrador do Timer2
    counterT2++;

    if(counterT2 == 10)
    { 
      counterT2 = 0x00;
     // read_channels();
    }
       
   //if(canal_01 > 1500) digitalWrite(13, HIGH);
   //else digitalWrite(13, LOW);

    
    
    
} //end ISR
    

// =============================================================================================================
// --- Configurações iniciais ---
void setup()
{ 
     
  // -- Direção dos I/Os --
  pinMode(ch1, INPUT); //Entrada para o canal 1 do rádio
  pinMode(ch2, INPUT); //Entrada para o canal 2 do rádio
  pinMode(ch3, INPUT); //Entrada para o canal 3 do rádio
  pinMode(ch4, INPUT); //Entrada para o canal 4 do rádio
  pinMode(ch5, INPUT); //Entrada para o canal 5 do rádio
  pinMode(ch6, INPUT); //Entrada para o canal 6 do rádio
  pinMode(ch7, INPUT); //Entrada para o canal 7 do rádio
  pinMode(ch8, INPUT); //Entrada para o canal 8 do rádio
  
  pinMode(pwm1, OUTPUT);   //saída pwm1
  pinMode(pwm2, OUTPUT);   //saída pwm2
  pinMode(inv1, OUTPUT);   //saída inv1
  pinMode(inv2, OUTPUT);   //saída inv2
  pinMode(LED_BUILTIN, OUTPUT);

  
      
  Serial.begin(9600);            //Inicia comunicação Serial com 9600 de baud rate


    // -- Registradores de configuração do Timer2 --
     TCCR2A = 0x00;   //Timer operando em modo normal
     TCCR2B = 0x07;   //Prescaler 1:1024
     TCNT2  = 0x64;   //10 ms overflow again
     TIMSK2 = 0x01;   //Habilita interrupção do Timer2
   
   
  
} //end setup


// =============================================================================================================
// --- Loop Infinito ---
void loop()
{
    
    read_channels();
   test_channels(); //Envia informação para o Serial Monitor

    // atuadores();
    
    
    
    if(canal_01 > 1500){
      digitalWrite(13, HIGH);
    }else {
      digitalWrite(13, LOW);
    }
    if(canal_02 > 1500){
      digitalWrite(10, HIGH);
    }else {
      digitalWrite(10, LOW);
    }
    if(canal_03 > 1600) {
      digitalWrite(11, HIGH);

    } else {
      digitalWrite(11, LOW);
    }

    if (canal_04 > 1500) {
      digitalWrite(12, HIGH);
    } else   {
      digitalWrite(12, LOW);
    }

    
    if(canal_05 > 1500){
      digitalWrite(12, HIGH);
    }else {
      digitalWrite(12, LOW);
    }
    if(canal_06 > 1500){
      digitalWrite(10, HIGH);
    }else {
      digitalWrite(10, LOW);
    }
    if(canal_07 > 1600) {
      digitalWrite(11, HIGH);

    } else {
      digitalWrite(11, LOW);
    }
    if (canal_08 > 1500) {
      digitalWrite(13, HIGH);
    } else   {
      digitalWrite(13, LOW);
    }

    
    
  


    
  


   //delay(3000);


    
    
    
} //end loop


// =============================================================================================================
// --- Funções Auxiliares ---
void atuadores()                                                //Função de controle dos atuadores do Robô US-2
{
  //1848    1034
  //1034   1454   1868
  
   pwm_value = map(canal_03, 1848, 1034, 0, 255);

   analogWrite(pwm1, pwm_value);
   analogWrite(pwm2, pwm_value);


   if(canal_04 > 1300 && canal_04 < 1600)
   {
      digitalWrite(inv1, HIGH); 
      digitalWrite(inv2, HIGH); 
    
   }

   if(canal_04 < 1300)
   {
    
      digitalWrite(inv1, HIGH); 
      digitalWrite(inv2,  LOW); 
    
   }

   if(canal_04 > 1600)
   {
    
      digitalWrite(inv1,  LOW); 
      digitalWrite(inv2, HIGH); 
    
   }
  
  
  
} //end atuadores


// =============================================================================================================
void read_channels()                                            //Faz a leitura dos 6 primeiros canais do rádio
{
 
      canal_01 = pulseIn(ch1, HIGH, 50000);     //Lê pulso em nível alto do canal 1 e armazena na variável canal_01
      canal_02 = pulseIn(ch2, HIGH, 50000);     //Lê pulso em nível alto do canal 2 e armazena na variável canal_02
      canal_03 = pulseIn(ch3, HIGH, 50000);   //Lê pulso em nível alto do canal 3 e armazena na variável canal_03
      canal_04 = pulseIn(ch4, HIGH, 50000);     //Lê pulso em nível alto do canal 4 e armazena na variável canal_04
      canal_05 = pulseIn(ch5, HIGH, 50000);     //Lê pulso em nível alto do canal 5 e armazena na variável canal_05
      canal_06 = pulseIn(ch6, HIGH, 50000);     //Lê pulso em nível alto do canal 6 e armazena na variável canal_06
      canal_07 = pulseIn(ch7, HIGH, 50000);    //Lê pulso em nível alto do canal 7 e armazena na variável canal_07
      canal_08 = pulseIn(ch8, HIGH, 50000);     //Lê pulso em nível alto do canal 8 e armazena na variável canal_08
 
} //end read channels


void test_channels() //Testa os canais via serial monitor (comentar esta função e só chamar quando necessário)
{
  
     Serial.println("=================");
      Serial.print("Canal 01:  ");
      Serial.println(canal_01);
      Serial.print("Canal 02:  ");
      Serial.println(canal_02);
      Serial.print("Canal 03:  ");
      Serial.println(canal_03);
      Serial.print("Canal 04:  ");
      Serial.println(canal_04);
      Serial.print("Canal 05:  ");
      Serial.println(canal_05);
      Serial.print("Canal 06:  ");
      Serial.println(canal_06);
      Serial.print("Canal 07:  ");
      Serial.println(canal_07);
      Serial.print("Canal 08:  ");
      Serial.println(canal_08);
  
} //end test_channels